This PYADOLC, a Python module to differentiate complex algorithms written in Python.
It wraps the functionality of the library ADOL-C (C++).

Authors: Sebastian F. Walter

Licence: BSD
============
* Copyright (c) 2008, Sebastian F. Walter
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*     * Redistributions of source code must retain the above copyright
*       notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in the
*       documentation and/or other materials provided with the distribution.
*     * Neither the name of the HU Berlin nor the
*       names of its contributors may be used to endorse or promote products
*       derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY Sebastian F. Walter ''AS IS'' AND ANY
* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL Sebastian F. Walter BE LIABLE FOR ANY
* DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


EXAMPLE USAGE:
==============

import numpy
from adolc import *

N = M = 10
A = numpy.zeros((M,N))
A[:] = [[ 1./N +(n==m) for n in range(N)] for m in range(M)]


def f(x):
	global A
	return numpy.dot(A,x)

# tape a function evaluation
trace_on(1)
for n in range(N):
	ax[n].is_independent(x[n])
ay = f(ax)
for m in range(M):
	y[m] = depends_on(ay[m])
trace_off()

# compute jacobian of f at x
J = jacobian(1,x)

# compute gradient of f at x
if M==1:
	g = gradient(1,x)


REQUIREMENTS:
=============
you need to install:
scons from http://www.scons.org/
boost from http://www.boost.org/


INSTALLATION:
1) copy this folder to a place where it is going to stay. This is imporant since the path to the  shared library adolc.so of adolc  is "saved" in the adolc.so file for python as absolute path.

2) go to the folderadolc-2.0.0 and compile ADOL-C:
configure make
do NOT "make install"

3) modify the SConstruct file such that the boost include files and libraries can be found

4) run scons on a command shell

